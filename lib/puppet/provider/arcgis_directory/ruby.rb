$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', '..', '..'))

require 'puppet/provider/arcgis_rest_api'

##
# REST API for directory objects
#
# = Directories =
# List: http://server:port/arcgis/admin/system/directories [GET]
# Create: http://server:port/arcgis/admin/system/directories/register [POST]
# Retrieve: http://server:port/arcgis/admin/system/directories/<dir> [GET]
# Update: http://server:port/arcgis/admin/system/directories/<dir>/edit [POST]
# Delete: http://server:port/arcgis/admin/system/directories/<dir>/unregister [POST]
#
#
# List
##
# [james@arcgis ~]$ curl -XGET -i 'http://localhost:6080/arcgis/admin/system/directories?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 3127
# Date: Thu, 30 Aug 2018 21:10:10 GMT
# Server:
#
# {
#   "directories": [
#     {
#       "name": "arcgisoutput",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgisoutput",
#       "directoryType": "OUTPUT",
#       "cleanupMode": "TIME_ELAPSED_SINCE_LAST_MODIFIED",
#       "maxFileAge": 10,
#       "description": "Stores various information generated by services, such as map images.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgisoutput"
#     },
#     {
#       "name": "arcgisjobs",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgisjobs",
#       "directoryType": "JOBS",
#       "cleanupMode": "TIME_ELAPSED_SINCE_LAST_MODIFIED",
#       "maxFileAge": 360,
#       "description": "Stores results and other information from geoprocessing services.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgisjobs"
#     },
#     {
#       "name": "arcgiscache",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgiscache",
#       "directoryType": "CACHE",
#       "cleanupMode": "NONE",
#       "maxFileAge": 0,
#       "description": "Stores tile caches used by map, globe, and image services for rapid performance.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgiscache"
#     },
#     {
#       "name": "arcgisuploads",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgissystem/arcgisuploads",
#       "directoryType": "UPLOADS",
#       "cleanupMode": "TIME_ELAPSED_SINCE_LAST_MODIFIED",
#       "maxFileAge": 1440,
#       "description": "Stores items uploaded to ArcGIS Server during publishing from a remote server.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgisuploads"
#     },
#     {
#       "name": "arcgisinput",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgissystem/arcgisinput",
#       "directoryType": "INPUT",
#       "cleanupMode": "NONE",
#       "maxFileAge": 0,
#       "description": "Stores source files (such as maps and data) for services that you publish.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgisinput"
#     },
#     {
#       "name": "kml",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgissystem/kml",
#       "directoryType": "KML",
#       "cleanupMode": "NONE",
#       "maxFileAge": 0,
#       "description": "Stores files used by KML network links published on ArcGIS Server.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/kml"
#     },
#     {
#       "name": "arcgisindex",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgissystem/arcgisindex",
#       "directoryType": "INDEX",
#       "cleanupMode": "NONE",
#       "maxFileAge": 0,
#       "description": "Stores indexes of data locations used by the search service.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgisindex"
#     },
#     {
#       "name": "arcgisjobregistry",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgissystem/arcgisjobregistry",
#       "directoryType": "JOBREGISTRY",
#       "cleanupMode": "NONE",
#       "maxFileAge": 0,
#       "description": "Stores files that are used internally by the GIS server.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgisjobregistry"
#     },
#     {
#       "name": "arcgissystem",
#       "physicalPath": "/opt/arcgis/server/usr/directories/arcgissystem",
#       "directoryType": "SYSTEM",
#       "cleanupMode": "TIME_ELAPSED_SINCE_LAST_MODIFIED",
#       "maxFileAge": 1440,
#       "description": "Stores directories and files used internally by ArcGIS Server.",
#       "useLocalDir": "false",
#       "localDirectoryPath": "",
#       "virtualPath": "/rest/directories/arcgissystem"
#     }
#   ]
# }
##
#
# Get a single directory
##
# [james@arcgis ~]$ curl -XGET -I 'http://localhost:6080/arcgis/admin/system/directories/arcgisoutput?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 357
# Date: Fri, 31 Aug 2018 00:59:18 GMT
# Server:
#
# {
#   "name": "arcgisoutput",
#   "physicalPath": "/opt/arcgis/server/usr/directories/arcgisoutput",
#   "directoryType": "OUTPUT",
#   "cleanupMode": "TIME_ELAPSED_SINCE_LAST_MODIFIED",
#   "maxFileAge": 10,
#   "description": "Stores various information generated by services, such as map images.",
#   "useLocalDir": "false",
#   "localDirectoryPath": "",
#   "virtualPath": "/rest/directories/arcgisoutput"
# }
##
#
# Get a single directory that is not present
##
# [james@arcgis ~]$ curl -I -XGET 'http://localhost:6080/arcgis/admin/system/directories/arcgisoutput2?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 112
# Date: Fri, 31 Aug 2018 02:13:50 GMT
# Server:
#
# {
#   "status": "error",
#   "messages": [
#     "Could not find resource or operation 'arcgisoutput2' on the system."
#   ],
#   "code": 404
# }
##
#
# Update a directory
# Note: this requires all parameters, not just the ones being updated
##
# [james@arcgis ~]$ curl -XPOST -H "Content-Type: application/x-www-form-urlencoded" -i \
#   -d 'name=arcgisoutput&physicalPath=/opt/arcgis/data/server/output&directoryType=OUTPUT&cleanupMode=TIME_ELAPSED_SINCE_LAST_MODIFIED&maxFileAge=10&description=Stores%20various%20information%20generated%20by%20services,%20such%20as%20map%20images.' \
#   'http://localhost:6080/arcgis/admin/system/directories/arcgisoutput/edit?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 34
# Date: Fri, 31 Aug 2018 01:11:34 GMT
# Server:
#
# {"status":"success","messages":[]}
##
#
# Update a directory that does not exist
##
# [james@arcgis ~]$ curl -XPOST -H "Content-Type: application/x-www-form-urlencoded" -i \
#   -d 'name=arcgisoutput&physicalPath=/opt/arcgis/data/server/output&directoryType=OUTPUT&cleanupMode=TIME_ELAPSED_SINCE_LAST_MODIFIED&maxFileAge=10&description=Stores%20various%20information%20generated%20by%20services,%20such%20as%20map%20images.' \
#   'http://localhost:6080/arcgis/admin/system/directories/arcgisoutput2/edit?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 112
# Date: Fri, 31 Aug 2018 02:15:35 GMT
# Server:
#
# {
#   "status": "error",
#   "messages": [
#     "Could not find resource or operation 'arcgisoutput2' on the system."
#   ],
#   "code": 404
# }
##
#
# Create a directory
##
# [james@arcgis ~]$ curl -XPOST -H "Content-Type: application/x-www-form-urlencoded" -i \
#   -d 'name=arcgisoutput2&physicalPath=/opt/arcgis/data/server/output2&directoryType=OUTPUT&cleanupMode=TIME_ELAPSED_SINCE_LAST_MODIFIED&maxFileAge=10&description=Stores%20various%20information%20generated%20by%20services,%20such%20as%20map%20images.' \
#   'http://localhost:6080/arcgis/admin/system/directories/register?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 34
# Date: Fri, 31 Aug 2018 01:15:40 GMT
# Server:
#
# {"status":"success","messages":[]}
##
#
# Create a directory that already exists
# IMPORTANT! Running this command the first time will cause this result below AND
# will delete the directory with the same name. Running the command a second time
# will create the resource you were trying to create.
##
# [james@arcgis ~]$ curl -XPOST -H "Content-Type: application/x-www-form-urlencoded" -i \
#   -d 'name=arcgisoutput&physicalPath=/opt/arcgis/data/server/output2&directoryType=OUTPUT&cleanupMode=TIME_ELAPSED_SINCE_LAST_MODIFIED&maxFileAge=10&description=Stores%20various%20information%20generated%20by%20services,%20such%20as%20map%20images.' \
#   'http://localhost:6080/arcgis/admin/system/directories/register?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 187
# Date: Fri, 31 Aug 2018 02:18:32 GMT
# Server:
#
# {
#   "status": "error",
#   "messages": [
#     "Failed to register the server directory 'arcgisoutput'. A server directory with the name 'arcgisoutput' is already registered with the server."
#   ],
#   "code": 500
# }
##
#
# Delete a directory
##
# [james@arcgis ~]$ curl -i -XPOST 'http://localhost:6080/arcgis/admin/system/directories/arcgisoutput2/unregister?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 20
# Date: Fri, 31 Aug 2018 01:17:09 GMT
# Server:
#
# {"status":"success"}
##
#
# Delete a directory that does not exist
##
# [james@arcgis ~]$ curl -I -XPOST 'http://localhost:6080/arcgis/admin/system/directories/arcgisoutput2/unregister?f=json&token=...'
# HTTP/1.1 200 OK
# Content-Type: text/plain;charset=UTF-8
# Content-Length: 112
# Date: Fri, 31 Aug 2018 02:17:05 GMT
# Server:
#
# {
#   "status": "error",
#   "messages": [
#     "Could not find resource or operation 'arcgisoutput2' on the system."
#   ],
#   "code": 404
# }
##
#
# TODO: there can be one and only one SYSTEM directory.
# See: https://developers.arcgis.com/rest/enterprise-administration/server/directory.htm
Puppet::Type.type(:arcgis_directory).provide(
  :ruby,
  parent: Puppet::Provider::ArcGISRESTAPI,
  server_base_uri: 'http://localhost:6080/arcgis',
  http_read_timeout: 3600,
  admin_username: 'admin',
  admin_password: 'admin',
) do
  desc 'A REST API based provider to manage the ArcGIS Enterprise Server directories.'

  DIRECTORY_CREATE_ENDPOINT = '/admin/system/directories/register'.freeze
  DIRECTORY_RETRIEVE_ENDPOINT = '/admin/system/directories/%s'.freeze
  DIRECTORY_UPDATE_ENDPOINT = '/admin/system/directories/%s/edit'.freeze
  DIRECTORY_DELETE_ENDPOINT = '/admin/system/directories/%s/unregister'.freeze
  DIRECTORY_LIST_ENDPOINT = '/admin/system/directories'.freeze

  VALID_DIRECTORY_TYPES = ['CACHE', 'JOBS', 'OUTPUT', 'SYSTEM'].freeze

  mk_resource_methods

  def do_flush
    # TODO: this doesn't seem to ever get hit
    if @property_flush[:ensure] == :absent
      Puppet.debug("Found property_flush[ensure] = absent; removing arcgis_directory '#{resource[:name]}'")
      rest_delete
      return
    end

    # TODO: is there some other way to differentiate between create and update?
    upstream = rest_retrieve
    if upstream.nil? || upstream.name != resource[:name]
      Puppet.debug("No upstream object found or name is not equal; creating arcgis_directory '#{resource[:name]}'")
      rest_create
    elsif resource[:ensure] == :absent
      Puppet.debug("resource[ensure] = absent; creating arcgis_directory '#{resource[:name]}'")
      rest_delete
    else
      Puppet.debug("Not create or delete; updating arcgis_directory '#{resource[:name]}'")
      rest_update
    end
  end

  # Use the current resource to generate a hash that is ready to be turned into
  # form data for create or update.
  def type_to_form_ready_hash
    {
      name:          resource[:name],
      physicalPath:  resource[:physicalpath],
      directoryType: resource[:directorytype],
      cleanupMode:   resource[:cleanupmode],
      maxFileAge:    resource[:maxfileage],
      description:   resource[:description],
    }
  end

  def rest_create
    Puppet.debug("Creating arcgis_directory '#{resource[:name]}'")
    response = self.class.send_auth_post(DIRECTORY_CREATE_ENDPOINT, type_to_form_ready_hash)
    self.class.validate_response(response)
  end

  def rest_retrieve
    Puppet.debug("Retrieving arcgis_directory '#{resource[:name]}'")
    self.class.retrieve_instance(resource[:name])
  end

  def rest_update
    Puppet.debug("Updating arcgis_directory '#{resource[:name]}'")
    response = self.class.send_auth_post(DIRECTORY_UPDATE_ENDPOINT % resource[:name], type_to_form_ready_hash)
    self.class.validate_response(response)
  end

  def rest_delete
    Puppet.debug("Deleting arcgis_directory '#{resource[:name]}'")
    response = self.class.send_auth_post(DIRECTORY_DELETE_ENDPOINT % resource[:name], {})
    self.class.validate_response(response)
  end

  # Convert from the JSON object that comes back from our rest call into a
  # directory object
  def self.json_object_to_type(directory)
    return nil if directory.nil?
    new(
      ensure:        :present,
      name:          directory[:name],
      physicalpath:  directory[:physicalPath],
      directorytype: directory[:directoryType],
      cleanupmode:   directory[:cleanupMode],
      maxfileage:    directory[:maxFileAge],
      description:   directory[:description],
    )
  end

  # Get a specific directory instance
  def self.retrieve_instance(directory)
    Puppet.debug("Getting single arcgis_directory instance '#{directory}'")
    response = send_auth_get(DIRECTORY_RETRIEVE_ENDPOINT % directory)
    body = JSON.parse(response.body, symbolize_names: true)
    if body.nil? || body[:code].to_i == 404
      Puppet.debug("Did not find arcgis_directory instance '#{directory}'")
      return nil
    else
      Puppet.debug("Found arcgis_directory instance '#{directory}': #{body}")
    end
    json_object_to_type(body)
  end

  # Get a list of all the directories, filtering for valid types
  def self.retrieve_instances
    Puppet.debug('Getting all arcgis_directory instances')
    response = send_auth_get(DIRECTORY_LIST_ENDPOINT)
    body = JSON.parse(response.body, symbolize_names: true)
    return nil if body[:directories].nil?

    instances = []
    body[:directories].each do |d|
      # Skip anything that's of a type that is not in our whitelist.
      next unless VALID_DIRECTORY_TYPES.include?(d[:directoryType])
      instances.push(json_object_to_type(d))
    end
    Puppet.debug("Found #{instances.length} arcgis_directory instances")

    instances
  end
end
